{"version":3,"sources":["img/profile.png","img/welcm.svg","components/side-bar/Sidebar.js","components/home/Welcome.js","Content.js","components/app/App.js","serviceWorker.js","index.js"],"names":["module","exports","Aside","styled","aside","Canvas","img","FullName","h2","Sidebar","ul","li","a","div","src","profile","alt","Wframe","Wnote","p","Whead","h1","Tittle","Span","button","experience","Date","getFullYear","bio","items","map","skill","index","key","personal","item","langue","id","name","level","Welcome","PageContent","Content","Component","Frame","App","state","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gHAAAA,EAAOC,QAAU,IAA0B,qC,iGCA3CD,EAAOC,QAAU,IAA0B,mC,u9CCI3C,IAAMC,EAAQC,IAAOC,MAAV,KAeLC,EAASF,IAAOG,IAAV,KAeNC,EAAWJ,IAAOK,GAAV,KA4CCC,GAvCDN,IAAOO,GAAV,KAGGP,IAAOQ,GAAV,KAKER,IAAOS,EAAV,KAGMT,IAAOU,IAAV,KAMG,WACZ,OACI,kBAACX,EAAD,KAEI,gCACI,kBAACG,EAAD,CAAQS,IAAKC,IAASC,IAAI,YAC1B,kBAACT,EAAD,wB,4xCC1DhB,IAAMU,EAASd,IAAOU,IAAV,KAMNK,EAAQf,IAAOgB,EAAV,KAQLC,GAHOjB,IAAOG,IAAV,KAGIH,IAAOkB,GAAV,MAMLC,EAASnB,IAAOkB,GAAV,KAONE,GAHWpB,IAAOU,IAAV,KAGDV,IAAOqB,OAAV,MAeJC,GAAc,IAAIC,MAAOC,cAAgB,KAEzCC,EAAG,4EAAwEH,EAAxE,mUAgCHI,GA5BS1B,IAAOU,IAAV,KASG,CACC,aACA,UACA,aACA,UACA,UACA,MACA,UACA,QACA,WACA,UACA,UACA,iBACA,gBACA,QACA,aACA,UAGKiB,KAAI,SAACC,EAAMC,GAAP,OAAiB,kBAACT,EAAD,CAAMU,IAAKD,GAAQD,OAevDG,EADiB,CAAC,kBAAkB,aAAa,eACvBJ,KAAI,SAACK,EAAKH,GAAN,OAAgB,kBAACT,EAAD,CAAMU,IAAKD,GAAQG,MACjEC,EAfW,CACb,CACIC,GAAG,EACHC,KAAK,UACLC,MAAM,UAGV,CACIF,GAAG,EACHC,KAAK,SACLC,MAAM,WAKUT,KAAI,SAACK,GAAD,OAAU,kBAACZ,EAAD,CAAMU,IAAKE,EAAKE,IAAKF,EAAKG,KAA1B,MAAkC,8BAAOH,EAAKI,WAqCrEC,EApCC,WACZ,OACI,6BACI,kBAACvB,EAAD,KACI,kBAACG,EAAD,6CAGA,kBAACF,EAAD,KAAQU,IAEZ,kBAACX,EAAD,KACI,kBAACK,EAAD,0BACA,kBAACJ,EAAD,KAAQW,IAEZ,kBAACZ,EAAD,KACI,kBAACK,EAAD,6BACA,kBAACJ,EAAD,KAAQkB,IAEZ,kBAACnB,EAAD,KACI,kBAACK,EAAD,wBAEA,kBAACJ,EAAD,KAAQgB,IAGZ,6BACA,6BACA,6BACA,kBAACjB,EAAD,KACI,kBAACC,EAAD,sCACA,kBAACA,EAAD,gC,waCzHhB,IAAMuB,EAActC,IAAOU,IAAV,KA0BF6B,GAjBEvC,IAAOK,GAAV,K,iLAQN,OACI,kBAACiC,EAAD,KACI,kBAAC,EAAD,W,GAJME,c,0HCbtB,IAAMC,EAAQzC,IAAOU,IAAV,KAsCIgC,E,2MA/BbC,MAAQ,G,wEAmBN,OACE,kBAACF,EAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,W,GAxBQD,aCCEI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.f484f5b5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profile.08608dcb.png\";","module.exports = __webpack_public_path__ + \"static/media/welcm.6a6400b1.svg\";","import React from 'react'\nimport styled from 'styled-components'\nimport profile from '../../img/profile.png'\n\nconst Aside = styled.aside`\n    margin: 0;\n    padding: 0;\n    width: 400px;\n    background-color: steelblue;\n    position: fixed;\n    height: 100%;\n    overflow: auto;\n    @media screen and (max-width: 700px) {\n        width: 100%;\n        height: auto;\n        position: fixed;\n        content {margin-left: 0;}\n      };\n`\nconst Canvas = styled.img`\n    border-radius: 50%;\n    width: 150px;\n    margin: 150px 0px 0px 0px;\n    @media screen and (max-width: 700px) {\n        width: 75px;\n        height:auto;\n        margin: 10px 0px 10px 50px;\n    }\n    @media screen and (max-width: 400px) {\n        width:30px;\n        margin:5px 0px 0px 2px;\n      }\n`\n\nconst FullName = styled.h2`\n      font-size:25px;\n      color:white;\n      font-weight:bold;\n`\nconst NavUl = styled.ul`\n\n`\nconst NavLi = styled.li`\n      font-size:20px;\n      color:white;\n      \n`\nconst NavA = styled.a`\n      color:white;\n`\nconst MenuDiv = styled.div`\n        margin: 50px 0px 0px 120px;\n        text-align:justify;\n        \n`\n\nconst Sidebar = () => {\n    return (\n        <Aside>\n            \n            <center>\n                <Canvas src={profile} alt=\"profile\"></Canvas>\n                <FullName>Komla Sodji</FullName>\n                {/* <MenuDiv>\n                    <NavUl>\n                    <NavLi><NavA href=\"\">Home</NavA></NavLi>\n                    <NavLi><NavA href=\"\">my profile</NavA></NavLi>\n                    <NavLi><NavA href=\"\">personal projects</NavA></NavLi>\n                    <NavLi><NavA href=\"\">Portfolio</NavA></NavLi>\n                    <NavLi><NavA href=\"\">send me a message</NavA> </NavLi>\n                    </NavUl>\n                </MenuDiv> */}\n                \n            </center>\n        </Aside>\n    )\n}\n\nexport default Sidebar","import React from 'react'\nimport styled from 'styled-components'\nimport welcm from '../../img/welcm.svg'\n\nconst Wframe = styled.div`\n    text-align:center;\n    transition: 0.3s;\n    padding: 20px;\n    margin: 30px 100px 30px 100px;\n`\nconst Wnote = styled.p`\n    font-size:22px;\n    text-align:center;\n`\n\nconst Wimg = styled.img`\n    padding-top:5px;\n`\nconst Whead = styled.h1`\n    font-size:40px;\n    padding: 20px 20px 20px 20px;\n    \n    \n`\nconst Tittle = styled.h1`\n    font-size:25px;\n    font-color:red;\n`\nconst Skilldiv = styled.div`\n   \n`\nconst Span = styled.button`\n    padding:12px 12px;\n    margin: 10px;\n    border-radius:32px;\n    display:inline-block;\n    font-size:20px;\n    text-align: center;\n    margin-bottom: 4px;\n    margin-right: 4px;\n    cursor: pointer;\n    background-color:steelblue;\n    color:white;\n    padding: 10px 20px 10px 20px;\n`\n\nconst experience =  new Date().getFullYear() - 2014;\n\nconst bio = `I'm a Full-stack Software Engineer with industry experience (over ${experience} years), building websites, RESTful API, and so on. Using Javascript, Node js , React and PHP at daily work.\n    Usually, using Angular, Docker for personal projects.Strong TDD Advocate, sometimes maintaning services on Linux based servers.\\n\\n\\n\n    I also have enthousiasm for problem solving and digging new techs.`;\n\nconst Footer = styled.div`\n    text-align:center;\n    transition: 0.3s;\n    padding: 20px;\n    margin: 30px 100px 30px 100px;\n    background-color:red;\n    font-size:10px;\n`;            \n\nconst skills = [\n                'Javascript',\n                'Node JS',\n                'Express JS',\n                'ReactJS',\n                'Angular',\n                'PHP',\n                'Laravel',\n                'Redis',\n                'RabbitMQ',\n                'MongoDB',\n                'GraphQL',\n                'Apollo graphQL',\n                'Elasticsearch',\n                'MySql',\n                'PostgreSQL',\n                'Docker'\n            ];\n\nconst items = skills.map((skill,index) => <Span key={index}>{skill}</Span>)\nconst langages = [\n    {\n        id:1,\n        name:'English',\n        level:'Fluent'\n\n    },\n    {\n        id:2,\n        name:'French',\n        level:'Fluent'\n    } \n];\nconst personalSkills = ['Problem Solving','Innovative','Team Player'];\nconst personal = personalSkills.map((item,index) => <Span key={index}>{item}</Span>)\nconst langue = langages.map((item) => <Span key={item.id}>{item.name} - <span>{item.level}</span></Span>)\nconst Welcome = () => {\n    return (\n        <div>\n            <Wframe>\n                <Whead>ðŸ‘‹ Hello, I'm Komla Sodji </Whead>\n                {/* <Wframe><Wimg src={welcm}></Wimg>  </Wframe> */}\n                    \n                <Wnote>{bio}</Wnote>\n            </Wframe>\n            <Wframe>\n                <Tittle>Technicals Skills</Tittle>\n                <Wnote>{items}</Wnote>\n            </Wframe>\n            <Wframe>\n                <Tittle>Communication Skills</Tittle>\n                <Wnote>{langue}</Wnote>\n            </Wframe>\n            <Wframe>\n                <Tittle>Personal Skills</Tittle>\n\n                <Wnote>{personal}</Wnote>\n\n            </Wframe>\n            <br></br>\n            <br></br>\n            <br></br>\n            <Wframe>\n                <Wnote>Email: duhamelgking@gmail.com</Wnote>\n                <Wnote>Phone: +233556304507</Wnote>\n            </Wframe>\n            \n        </div>\n\n    )\n}\n\nexport default Welcome","import React ,{ Component } from 'react'\nimport styled from 'styled-components'\nimport Welcome from './components/home/Welcome'\n\nconst PageContent = styled.div`\n    margin-left: 400px;\n    padding: 30px 16px 0 0;\n    height: 1000px;\n    @media screen and (max-width: 700px) {\n        width:100%;\n        padding: 100px 0 0 10px;\n      };\n`\nconst Greeting = styled.h2`\n    font-family: 'Livvic', sans-serif;\n    color:black;\n    size:12px;\n    font-weight: bold;\n`\nclass Content extends Component {\n    render(){\n        return (\n            <PageContent>\n                <Welcome></Welcome>\n                   {/* <Greeting>lorem ip siofewrf reunfuier jasbiusd bsudbuis hsiucbui </Greeting> */}\n            </PageContent>\n        )\n    }\n}\n\nexport default Content","import React,{Component} from 'react';\nimport './App.css';\nimport Sidebar from '../side-bar/Sidebar'\nimport Content from '../../Content'\nimport styled from 'styled-components'\n\nconst Frame = styled.div`\n    width:100%;\n    background-color: snow;\n   \n`\nclass App extends Component {\n\n  state = {}\n\n  // addNew = (data) =>{\n  //   data.id = Math.random()\n  //   let element = [...this.state.data,data]\n  //   this.setState({\n  //     data:element \n  //   })\n  // }\n  // deleteNew = (id) => {\n  //   console.log(id)\n  //   let elements = this.state.data.filter(element => {\n  //     return element.id !==id\n  //   })\n  //   this.setState({\n  //     data:elements\n  //   })\n  // }\n  render(){\n    return (\n      <Frame>\n          <Sidebar />\n          <Content />\n           {/* <AddElement addNew={this.addNew}  /> */}\n      </Frame>\n       \n    );\n  } \n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}